# Complete Backend Folder Structure & Flow

## üìÅ Folder Structure

```
/server/
‚îÇ
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ db.js
‚îÇ
‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îú‚îÄ‚îÄ stockController.js
‚îÇ   ‚îî‚îÄ‚îÄ watchlistController.js
‚îÇ
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ Stock.js
‚îÇ   ‚îî‚îÄ‚îÄ Watchlist.js
‚îÇ
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ stockRoutes.js
‚îÇ   ‚îî‚îÄ‚îÄ watchlistRoutes.js
‚îÇ
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ finnhub.js
‚îÇ   ‚îú‚îÄ‚îÄ rateLimiter.js
‚îÇ   ‚îî‚îÄ‚îÄ technicalIndicators.js
‚îÇ
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ fetchAllStocks.js
‚îÇ
‚îú‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ .env.example
‚îú‚îÄ‚îÄ .gitignore
‚îî‚îÄ‚îÄ README.md
```

---

## üìÑ Detailed File Contents & Flow

### 1Ô∏è‚É£ **Entry Point: `server.js`**

**Purpose:** Main application entry point that starts the Express server

**Contains:**
- Load environment variables (`dotenv`)
- Import Express and middleware (cors, body-parser)
- Connect to MongoDB database
- Register API routes
- Set up cron jobs for scheduled tasks
- Start the HTTP server

**Flow:**
```
START
  ‚Üì
Load .env ‚Üí Connect MongoDB ‚Üí Setup Middleware ‚Üí Register Routes ‚Üí Start Server
```

**Key Code:**
```javascript
require('dotenv').config();
const express = require('express');
const connectDB = require('./config/db');
const stockRoutes = require('./routes/stockRoutes');
const watchlistRoutes = require('./routes/watchlistRoutes');

connectDB(); // Connect to MongoDB
app.use('/api/stocks', stockRoutes); // Register routes
app.listen(PORT); // Start server
```

---

### 2Ô∏è‚É£ **Configuration: `config/db.js`**

**Purpose:** Handle MongoDB connection

**Contains:**
- MongoDB connection string from environment
- Connection options
- Error handling for failed connections

**Flow:**
```
Load MONGODB_URI from .env ‚Üí Connect using Mongoose ‚Üí Log success/error
```

**Key Code:**
```javascript
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('MongoDB Connected'))
  .catch((err) => console.error(err));
```

---

### 3Ô∏è‚É£ **Models: `models/Stock.js` & `models/Watchlist.js`**

**Purpose:** Define database schemas and data structure

#### **Stock.js**
**Contains:**
- Stock schema with fields:
  - symbol, companyName, currentPrice
  - entryPrice, stopLoss, targetPrice
  - successProbability, riskToReward, trend
  - ema20, ema50, rsi, macd
  - volume, marketCap, lastFetched
- Indexes for faster queries (symbol, trend, lastFetched)
- Validation rules

**Schema Structure:**
```javascript
{
  symbol: String (required, unique),
  currentPrice: Number (required),
  trend: Enum ['Uptrend', 'Downtrend', 'Neutral'],
  riskToReward: Number,
  lastFetched: Date,
  // ... other fields
}
```

#### **Watchlist.js**
**Contains:**
- Watchlist schema with fields:
  - name, description
  - stocks (array of Stock IDs - references)
  - stockSymbols (array of symbol strings)
  - lastRefetched
- Population setup for fetching related stocks

**Schema Structure:**
```javascript
{
  name: String (required),
  stocks: [ObjectId] (references Stock model),
  stockSymbols: [String],
  lastRefetched: Date
}
```

---

### 4Ô∏è‚É£ **Utilities: `utils/` folder**

#### **A. `finnhub.js`**
**Purpose:** Wrapper for Finnhub API calls

**Contains:**
- API configuration (base URL, API key)
- Methods for different API endpoints:
  - `getQuote(symbol)` - Get current price
  - `getCompanyProfile(symbol)` - Get company info
  - `getBasicFinancials(symbol)` - Get financial metrics
  - `getCandles(symbol, from, to)` - Get historical data
- Error handling for failed API calls

**Flow:**
```
Request ‚Üí Build URL with params ‚Üí Add API key ‚Üí Make HTTP request ‚Üí Return data
```

**Key Methods:**
```javascript
async getQuote(symbol) {
  // Returns: { c: currentPrice, h: high, l: low, o: open, v: volume }
}

async getCandles(symbol, resolution, from, to) {
  // Returns: { c: [closes], h: [highs], l: [lows], ... }
}
```

---

#### **B. `rateLimiter.js`**
**Purpose:** Control API call rate to respect Finnhub limits (60/min)

**Contains:**
- Rate limit configuration (calls per minute)
- Delay calculation (60s / 60 calls = 1s delay)
- `sleep()` method for pausing execution
- `execute()` method for single API call with delay
- `executeBatch()` method for processing arrays

**Flow:**
```
Call API ‚Üí Wait (delay) ‚Üí Call next API ‚Üí Repeat
```

**Key Code:**
```javascript
delay = (60 * 1000) / callsPerMinute; // 1000ms between calls

async execute(fn) {
  const result = await fn();
  await sleep(this.delay); // Wait before next call
  return result;
}
```

---

#### **C. `technicalIndicators.js`**
**Purpose:** Calculate trading indicators from price data

**Contains:**
- **EMA calculation** (20-day & 50-day)
- **RSI calculation** (14-day default)
- **MACD calculation** (12, 26, 9 periods)
- **Trend determination** logic
- **Risk-to-Reward calculation**
- **Success Probability calculation** (custom formula)

**Flow:**
```
Historical Prices ‚Üí Calculate EMA/RSI/MACD ‚Üí Determine Trend ‚Üí Calculate R:R ‚Üí Calculate Success %
```

**Key Methods:**
```javascript
calculateEMA(prices, period) {
  // Input: [100, 102, 105, ...]
  // Output: 103.5 (latest EMA value)
}

determineTrend(ema20, ema50, currentPrice) {
  if (price > ema20 && ema20 > ema50) return 'Uptrend';
  if (price < ema20 && ema20 < ema50) return 'Downtrend';
  return 'Neutral';
}

calculateRiskToReward(entry, stopLoss, target) {
  risk = |entry - stopLoss|;
  reward = |target - entry|;
  return reward / risk; // e.g., 2.5 (means 2.5:1 R:R)
}

calculateSuccessProbability(rsi, trend, riskToReward) {
  // Base: 50%
  // +15% if Uptrend, -15% if Downtrend
  // +10% if RSI < 30 (oversold)
  // +10% if R:R >= 3
  // Returns: 0-100
}
```

---

### 5Ô∏è‚É£ **Controllers: `controllers/` folder**

#### **A. `stockController.js`**
**Purpose:** Business logic for stock operations

**Contains 4 main functions:**

##### **1. `getStocks(req, res)`**
**Purpose:** Retrieve stocks from database with optional filters

**Flow:**
```
Receive request ‚Üí Parse query params (trend, price range, R:R) ‚Üí 
Build MongoDB filter ‚Üí Query database ‚Üí Return filtered stocks
```

**Example Request:**
```
GET /api/stocks?trend=Uptrend&minRiskReward=2&minPrice=50
```

**Response:**
```json
{
  "success": true,
  "count": 45,
  "data": [...]
}
```

---

##### **2. `refetchStock(req, res)`**
**Purpose:** Refresh data for a single stock

**Flow:**
```
Get symbol from URL ‚Üí Call Finnhub API ‚Üí Calculate indicators ‚Üí 
Update/Insert in DB ‚Üí Return updated stock
```

**Steps:**
1. Extract symbol from `req.params`
2. Call `finnhubAPI.getQuote(symbol)`
3. Call `finnhubAPI.getCandles(symbol)` for historical data
4. Calculate EMA, RSI, MACD using `technicalIndicators`
5. Determine trend and success probability
6. Update MongoDB using `findOneAndUpdate()`

**Example Request:**
```
GET /api/stocks/refetch/AAPL
```

---

##### **3. `fetchMultipleStocks(req, res)`**
**Purpose:** Fetch data for multiple stocks with rate limiting

**Flow:**
```
Receive array of symbols ‚Üí Loop through each ‚Üí Apply rate limiter ‚Üí 
Fetch data ‚Üí Calculate indicators ‚Üí Save to DB ‚Üí Track success/failed
```

**Steps:**
1. Get `symbols` array from request body
2. Loop through each symbol
3. Use `rateLimiter.execute()` for each call (1s delay)
4. Track successful and failed fetches
5. Return summary of results

**Example Request:**
```
POST /api/stocks/fetch-multiple
Body: { "symbols": ["AAPL", "MSFT", "GOOGL"] }
```

**Response:**
```json
{
  "success": true,
  "message": "Fetched 3 out of 3 stocks",
  "results": {
    "success": ["AAPL", "MSFT", "GOOGL"],
    "failed": []
  }
}
```

---

##### **4. `deleteStock(req, res)`**
**Purpose:** Remove a stock from database

**Flow:**
```
Get symbol ‚Üí Delete from MongoDB ‚Üí Return confirmation
```

---

#### **B. `watchlistController.js`**
**Purpose:** Business logic for watchlist operations

**Contains 6 main functions:**

##### **1. `createWatchlist(req, res)`**
**Flow:**
```
Receive name & stock symbols ‚Üí Find stocks in DB ‚Üí 
Create watchlist with stock references ‚Üí Save to DB
```

##### **2. `getWatchlists(req, res)`**
**Flow:**
```
Query all watchlists ‚Üí Populate stock details ‚Üí Return with full stock data
```

##### **3. `getWatchlist(req, res)`**
**Flow:**
```
Get watchlist ID ‚Üí Find in DB ‚Üí Populate stocks ‚Üí Return single watchlist
```

##### **4. `updateWatchlist(req, res)`**
**Flow:**
```
Get watchlist ID ‚Üí Update name/symbols ‚Üí Find new stocks ‚Üí Update DB
```

##### **5. `refetchWatchlist(req, res)`**
**Purpose:** Refresh all stocks in a watchlist

**Flow:**
```
Get watchlist ID ‚Üí Get all symbols ‚Üí Loop through symbols ‚Üí 
Apply rate limiter ‚Üí Fetch each stock ‚Üí Update DB ‚Üí 
Update lastRefetched timestamp
```

**Steps:**
1. Find watchlist by ID
2. Get `stockSymbols` array
3. Loop through each symbol with rate limiting
4. Call `fetchStockData()` for each
5. Update each stock in database
6. Update watchlist's `lastRefetched` field
7. Return summary (success/failed counts)

##### **6. `deleteWatchlist(req, res)`**
**Flow:**
```
Get watchlist ID ‚Üí Delete from DB ‚Üí Return confirmation
```

---

### 6Ô∏è‚É£ **Routes: `routes/` folder**

#### **A. `stockRoutes.js`**
**Purpose:** Define API endpoints for stocks

**Routes:**
```javascript
GET    /api/stocks                    ‚Üí getStocks()
GET    /api/stocks/refetch/:symbol    ‚Üí refetchStock()
POST   /api/stocks/fetch-multiple     ‚Üí fetchMultipleStocks()
DELETE /api/stocks/:symbol            ‚Üí deleteStock()
```

**Flow:**
```
HTTP Request ‚Üí Match route ‚Üí Call controller function ‚Üí Return response
```

---

#### **B. `watchlistRoutes.js`**
**Purpose:** Define API endpoints for watchlists

**Routes:**
```javascript
POST   /api/watchlists           ‚Üí createWatchlist()
GET    /api/watchlists           ‚Üí getWatchlists()
GET    /api/watchlists/:id       ‚Üí getWatchlist()
PUT    /api/watchlists/:id       ‚Üí updateWatchlist()
GET    /api/watchlists/:id/refetch ‚Üí refetchWatchlist()
DELETE /api/watchlists/:id       ‚Üí deleteWatchlist()
```

---

### 7Ô∏è‚É£ **Scripts: `scripts/fetchAllStocks.js`**

**Purpose:** One-time script to fetch 2700 stocks

**Flow:**
```
Connect to MongoDB ‚Üí Load stock symbols array ‚Üí 
Loop through all symbols ‚Üí Apply rate limiter ‚Üí 
Fetch each stock ‚Üí Calculate indicators ‚Üí Save to DB ‚Üí 
Log progress ‚Üí Disconnect
```

**Usage:**
```bash
npm run fetch-all
```

**Time Estimation:**
```
2700 stocks √∑ 60 calls/min = 45 minutes
```

---

## üîÑ Complete Data Flow Example

### **Scenario: User refetches a watchlist**

```
1. Frontend sends: GET /api/watchlists/123/refetch

2. server.js receives request ‚Üí routes to watchlistRoutes.js

3. watchlistRoutes.js matches route ‚Üí calls refetchWatchlist()

4. refetchWatchlist() in watchlistController.js:
   ‚îú‚îÄ Finds watchlist in MongoDB
   ‚îú‚îÄ Gets stockSymbols: ["AAPL", "MSFT", "GOOGL"]
   ‚îî‚îÄ Loops through each symbol

5. For each symbol:
   ‚îú‚îÄ rateLimiter.execute() adds 1s delay
   ‚îú‚îÄ finnhub.getQuote("AAPL") ‚Üí Gets current price
   ‚îú‚îÄ finnhub.getCandles("AAPL") ‚Üí Gets historical data
   ‚îú‚îÄ technicalIndicators.calculateEMA() ‚Üí Calculates EMA
   ‚îú‚îÄ technicalIndicators.calculateRSI() ‚Üí Calculates RSI
   ‚îú‚îÄ technicalIndicators.determineTrend() ‚Üí Determines trend
   ‚îú‚îÄ technicalIndicators.calculateRiskToReward() ‚Üí Calculates R:R
   ‚îî‚îÄ Stock.findOneAndUpdate() ‚Üí Saves to MongoDB

6. Update watchlist.lastRefetched in MongoDB

7. Return response:
   {
     "success": true,
     "message": "Refetched 3 out of 3 stocks",
     "results": { "success": [...], "failed": [] }
   }
```

---

## üìä Database Flow

### **Stock Collection**
```
Symbol (Index) ‚Üí Query fast by symbol
Trend (Index) ‚Üí Filter by trend quickly
LastFetched (Index) ‚Üí Sort by freshness
```

### **Watchlist Collection**
```
Name ‚Üí Identify watchlist
Stocks (References) ‚Üí Link to Stock documents
StockSymbols ‚Üí Store symbols for refetching
```

**Relationship:**
```
Watchlist ‚Üí has many ‚Üí Stocks (via ObjectId references)
```

---

## ‚öôÔ∏è Environment Variables (`.env`)

```env
PORT=5000                                    # Server port
MONGODB_URI=mongodb://localhost:27017/...   # Database URL
FINNHUB_API_KEY=your_key                    # API authentication
API_RATE_LIMIT=60                           # Calls per minute
```

---

## üéØ Key Concepts

### **Rate Limiting**
- Prevents exceeding Finnhub's 60 calls/min limit
- Adds ~1 second delay between each API call
- For 2700 stocks: 2700 √∑ 60 = 45 minutes

### **Technical Indicators**
- **EMA**: Smooth price trends (20-day & 50-day)
- **RSI**: Overbought/oversold (0-100 scale)
- **MACD**: Momentum indicator
- **Trend**: Determined by EMA crossovers

### **Database Indexing**
- Speeds up queries on frequently searched fields
- Indexes: symbol, trend, lastFetched

### **Error Handling**
- Try-catch blocks in all async functions
- Log errors to console
- Return meaningful error messages to frontend

---

## üìù Summary

**File Count:** 15 files
**Main Components:** 
- 1 Server (entry point)
- 1 Config (database)
- 2 Models (schemas)
- 3 Utils (API, rate limiter, indicators)
- 2 Controllers (business logic)
- 2 Routes (endpoints)
- 1 Script (batch fetch)
- 3 Config files (.env, .gitignore, package.json)

**Data Flow:**
```
Request ‚Üí Route ‚Üí Controller ‚Üí Utils/Models ‚Üí Database ‚Üí Response
```

This structure follows **MVC pattern** (Model-View-Controller) with separation of concerns for maintainability and scalability.